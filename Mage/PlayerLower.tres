[gd_resource type="ShaderMaterial" load_steps=5 format=3 uid="uid://crvehgcqc2hl"]

[ext_resource type="Texture2D" uid="uid://00rbopy6rjql" path="res://Mage/Color_Gradient.tres" id="1_fwuk1"]
[ext_resource type="Texture2D" uid="uid://b6u2r1pcsah0c" path="res://Mage/Fresnel_Gradient.tres" id="2_xb7y6"]
[ext_resource type="Texture2D" uid="uid://bps8nr3hvm84a" path="res://Mage/Player_Lower.png" id="3_j156k"]

[sub_resource type="Shader" id="Shader_vqngg"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_toon, specular_toon;

uniform vec4 albedo: source_color;
uniform sampler2D image_texture;
uniform sampler2D color_gradient;
uniform sampler2D fresnel_gradient;


float fresnel (float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0)), amount);
}

void vertex() {

}

void fragment() {
	float basic_fresnel = fresnel(4.0, NORMAL, VIEW);
	
	vec4 image = texture(image_texture, UV);
	ALBEDO = albedo.rgb * image.rgb + (basic_fresnel * texture(fresnel_gradient, vec2(basic_fresnel, 0.0)).rgb * 1.0);
}

void light() {
	float dotproduct = clamp(dot(NORMAL, LIGHT), -0.9, 0.9);
	float sample = clamp((dotproduct + 1.0) * ATTENUATION / 2.1, 0.05, 0.95);
	vec4 shaded = texture(color_gradient, vec2(sample, 0.0));
	DIFFUSE_LIGHT += clamp((shaded.rgb * LIGHT_COLOR), 0.0, 1.0);
	//DIFFUSE_LIGHT += (shaded.rgb * LIGHT_COLOR);
}"

[resource]
render_priority = 0
shader = SubResource("Shader_vqngg")
shader_parameter/albedo = Color(0.556863, 0.364706, 0.282353, 1)
shader_parameter/image_texture = ExtResource("3_j156k")
shader_parameter/color_gradient = ExtResource("1_fwuk1")
shader_parameter/fresnel_gradient = ExtResource("2_xb7y6")
